# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "main"
      - "refs/tags/*"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - ".azure/gpu-tests.yml"
      - "tests/**"
      - "pyproject.toml"  # includes pytest config
      - "requirements.txt"
      - "_requirements/**"
      - "src/**"
    exclude:
      - "*.md"
      - "**/*.md"

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "30"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    strategy:
      matrix:
        'PL dep.':
          image: "nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04"
          dependency: "pytorch-lightning"
        'Lightning dep.':
          image: "nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04"
          dependency: "lightning"
    pool: 'lit-rtx-3090'
    variables:
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )
      PYTHON_VERSION: "3.9"
      PIP_CACHE_DIR: "/var/tmp/pip"
    container:
      image: $(image)
      # default shm size is 64m. Increase it to avoid:
      # 'Error while creating shared memory: unhandled system error, NCCL version 2.7.8'
      options: "--gpus=all --shm-size=2gb -v /usr/bin/docker:/tmp/docker:ro  -v /var/tmp:/var/tmp"
    workspace:
      clean: all
    steps:

    - script: |
        container_id=$(head -1 /proc/self/cgroup|cut -d/ -f3)
        echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
        /tmp/docker exec -t -u 0 $container_id \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$container_id"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - script: |
        sudo apt-get update -q --fix-missing
        sudo apt-get install -q -y --no-install-recommends \
          build-essential wget python$(PYTHON_VERSION) python$(PYTHON_VERSION)-dev python$(PYTHON_VERSION)-distutils
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python$(PYTHON_VERSION) 1
        wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll --no-check-certificate
        python get-pip.py
      displayName: 'install python & pip'

    - bash: |
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        CUDA_version=$(nvcc --version | sed -n 's/^.*release \([0-9]\+\.[0-9]\+\).*$/\1/p')
        CUDA_version_mm="${CUDA_version//'.'/''}"
        echo "##vso[task.setvariable variable=CUDA_VERSION_MM]$CUDA_version_mm"
        echo "##vso[task.setvariable variable=TORCH_URL]https://download.pytorch.org/whl/cu${CUDA_version_mm}/torch_stable.html"
      displayName: 'set Env. vars'

    - bash: |
        echo $CUDA_VISIBLE_DEVICES
        echo $TORCH_URL
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        which python && which pip
        python --version
        pip --version
        pip list
      displayName: 'Image info & NVIDIA'

    - script: |
        python .azure/adjust-requirements.py $(dependency)
        cat requirements.txt
      displayName: 'Adjust dependencies'

    - bash: |
        CUDA_VERSION_BAGUA=$(python -c "print([ver for ver in [116,113,111,102] if $CUDA_VERSION_MM >= ver][0])")
        pip install -e '.[test]' "bagua-cuda$CUDA_VERSION_BAGUA" -U --find-links ${TORCH_URL}
      displayName: 'Install package & extras'

    - bash: |
        set -e
        pip list
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu == 2, f'GPU: {mgpu}'"
      displayName: 'Env details'

    - bash: python -m coverage run --source lightning_bagua -m pytest -v --durations=50
      workingDirectory: tests
      env:
        CUDA_LAUNCH_BLOCKING: 1
      displayName: 'Testing: standard'
      timeoutInMinutes: "10"

    - bash: bash run_standalone_tests.sh
      workingDirectory: tests
      env:
        PL_RUN_CUDA_TESTS: "1"
      displayName: 'Testing: standalone tests'
      timeoutInMinutes: "10"

    - bash: |
        python -m coverage report
        python -m coverage xml
        python -m coverage html
        python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
          --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
        ls -l
      workingDirectory: tests
      displayName: 'Statistics'
